{"version":3,"sources":["three-dots.svg","components/Common/Loader/Loader.tsx","types/PokemonsData.ts","components/PokemonCard/PokemonCard.tsx","components/SelectPokemons/SelectPokemons.tsx","App.tsx","Hooks/useOnScreen.tsx","reportWebVitals.ts","index.tsx"],"names":["Loader","className","src","svg","alt","isPokemonResponse","json","Boolean","count","isPokemonInfoResponse","id","PokemonCard","pokemonItem","onClick","isPokemonSelected","useState","weight","baseExperience","height","pokemonInfo","setPokemonInfo","isLoading","setIsLoading","pokemonImage","setPokemonImage","useEffect","a","fetch","url","response","body","base_experience","sprites","other","dream_world","front_default","getPokemonsInfo","name","SelectPokemons","pokemons","selectedPokemons","onSelectPokemon","map","includes","App","setPokemons","currentPage","setCurrentPage","isFetching","setIsFetching","ref","setRef","setSelectedPokemons","prevPokemons","results","getPokemons","onIntersect","isDisabled","observer","IntersectionObserver","isIntersecting","threshold","rootMargin","observe","unobserve","useIntersectionObserver","useCallback","prevLast","pokemonName","isCurrentlySelected","filter","item","length","shift","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sSAAe,G,MAAA,IAA0B,wC,OCGlC,SAASA,IACd,OACE,qBAAKC,UAAU,iBAAf,SACE,qBAAKA,UAAU,SAASC,IAAKC,EAAKC,IAAI,OCMrC,IAAMC,EAAoB,SAACC,GAChC,QAASA,GAAQC,QAASD,EAA0BE,QAEzCC,EAAwB,SAACH,GACpC,QAASA,GAAQC,QAASD,EAAqBI,K,YCJ1C,SAASC,EAAT,GAAuF,IAAhEC,EAA+D,EAA/DA,YAAaC,EAAkD,EAAlDA,QAASC,EAAyC,EAAzCA,kBAClD,EAAsCC,mBAAS,CAAEC,OAAQ,EAAGC,eAAgB,EAAGC,OAAQ,IAAvF,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAAkCL,oBAAS,GAA3C,mBAAOM,EAAP,KAAkBC,EAAlB,KACA,EAAwCP,mBAAS,IAAjD,mBAAOQ,EAAP,KAAqBC,EAArB,KAoBA,OAlBAC,qBAAU,WAAM,4CAEd,8BAAAC,EAAA,sEACyBC,MAAMf,EAAYgB,KAD3C,cACQC,EADR,gBAEsBA,EAASvB,OAF/B,OAEQwB,EAFR,OAGMrB,EAAsBqB,KACxBV,EAAe,CACbJ,OAAQc,EAAKd,OACbC,eAAgBa,EAAKC,gBACrBb,OAAQY,EAAKZ,SAEfM,EAAgBM,EAAKE,QAAQC,MAAMC,YAAYC,eAC/Cb,GAAa,IAVjB,4CAFc,sBACdA,GAAa,GADC,mCAedc,KACC,CAACxB,EAAYgB,MAGd,qBAAK3B,UAAWa,EAAoB,sBAAwB,eAAgBD,QAASA,EAArF,SACGQ,EACC,cAAC,EAAD,IAEA,sBAAKpB,UAAU,yBAAf,UACE,sBAAMA,UAAU,eAAhB,SAAgCW,EAAYyB,OAC5C,sBAAKpC,UAAU,sBAAf,UACE,4CAAekB,EAAYH,UAC3B,qDAAwBG,EAAYF,kBACpC,4CAAeE,EAAYD,aAE7B,qBAAKjB,UAAU,gBAAf,SACE,qBAAKC,IAAKqB,EAAcnB,IAAI,Y,MCtCjC,SAASkC,EAAT,GAA8F,IAApEC,EAAmE,EAAnEA,SAAUC,EAAyD,EAAzDA,iBAAkBC,EAAuC,EAAvCA,gBAC3D,OACE,8BACE,qBAAKxC,UAAU,gBAAf,SACGsC,EAASG,KAAI,SAAC9B,GACb,IAAME,EAAoB0B,EAAiBG,SAAS/B,EAAYyB,MAChE,OACE,cAAC,EAAD,CACEzB,YAAaA,EAEbE,kBAAmBA,EACnBD,QAAS,kBAAM4B,EAAgB7B,EAAYyB,KAAMvB,KAF5CF,EAAYyB,aCZ/B,IAEaO,EAAM,WACjB,MAAgC7B,mBAAyB,IAAzD,mBAAOwB,EAAP,KAAiBM,EAAjB,KACA,EAAsC9B,mBAAS,GAA/C,mBAAO+B,EAAP,KAAoBC,EAApB,KACA,EAAoChC,oBAAS,GAA7C,mBAAOiC,EAAP,KAAmBC,EAAnB,KACA,EAAsBlC,mBAAgC,MAAtD,mBAAOmC,EAAP,KAAYC,EAAZ,KACA,EAAgDpC,mBAAmB,IAAnE,mBAAOyB,EAAP,KAAyBY,EAAzB,KAEA3B,qBAAU,WAAM,4CACd,8BAAAC,EAAA,sEACyBC,MAAM,2CAAD,OAXhB,GAWgB,mBAXhB,GAYqDmB,IAFnE,cACQjB,EADR,gBAIsBA,EAASvB,OAJ/B,OAIQwB,EAJR,OAKMzB,EAAkByB,KACpBmB,GAAc,GACdJ,GAAY,SAACQ,GAAD,4BAAsBA,GAAtB,YAAuCvB,EAAKwB,cAP5D,4CADc,uBAAC,WAAD,wBAWdC,KACC,CAACT,ICpBC,YAAiF,IAA9CI,EAA6C,EAA7CA,IAAKM,EAAwC,EAAxCA,YAAaC,EAA2B,EAA3BA,WAC1DhC,qBAAU,WACR,IAAIgC,GAAeP,EAAnB,CAEA,IAAMQ,EAAW,IAAIC,sBACnB,YAAa,oBACDC,gBAAgBJ,MAE5B,CAAEK,UAAW,GAAKC,WAAY,UAKhC,OAFAJ,EAASK,QAAQb,GAEV,WACLQ,EAASM,UAAUd,OAEpB,CAACA,EAAKM,EAAaC,IDUtBQ,CAAwB,CACtBf,MACAM,YANkBU,uBAAY,WAC9BnB,GAAe,SAACoB,GAAD,OAAcA,EAAW,OACvC,IAKDV,WAAYT,IAkBd,OAAIA,EACK,cAAC,EAAD,IAGL,sBAAK/C,UAAU,kBAAf,UACE,sBAAMA,UAAU,eAAhB,kCACA,qBAAKA,UAAU,gBAAf,SACE,cAAC,EAAD,CAAgBsC,SAAUA,EAAUC,iBAAkBA,EAAkBC,gBAtBxD,SAAC2B,EAAqBC,GAI5C,GAAIA,EACFjB,EAAoBZ,EAAiB8B,QAAO,SAACC,GAAD,OAAUA,IAASH,UAC1D,CACL,GANuB,CAAC,aAMHzB,SAASyB,GAAc,OACxC5B,EAAiBgC,QANK,GAOxBhC,EAAiBiC,QACjBrB,EAAoB,GAAD,mBAAKZ,GAAL,CAAuB4B,MACrChB,EAAoB,GAAD,mBAAKZ,GAAL,CAAuB4B,WAa/C,qBAAKlB,IAAKC,EAAQlD,UAAU,uBElDrByE,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.3c2395e7.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/three-dots.b98a8c76.svg\";","import './Loader.css';\nimport svg from './../../../three-dots.svg';\n\nexport function Loader(): JSX.Element {\n  return (\n    <div className='loader-wrapper'>\n      <img className='loader' src={svg} alt='' />\n    </div>\n  );\n}\n","export type PokemonsData = { name: string; url: string };\nexport type PokemonInfo = {\n  weight: number;\n  base_experience: number;\n  height: number;\n  id: number;\n  sprites: { other: { dream_world: { front_default: string } } };\n};\nexport type PokemonsResponse = {\n  count: number;\n  results: PokemonsData[];\n};\nexport const isPokemonResponse = (json: unknown): json is PokemonsResponse => {\n  return !!json && Boolean((json as PokemonsResponse).count);\n};\nexport const isPokemonInfoResponse = (json: unknown): json is PokemonInfo => {\n  return !!json && Boolean((json as PokemonInfo).id);\n};\n","import { useEffect, useState } from 'react';\nimport { isPokemonInfoResponse, PokemonsData } from '../../types/PokemonsData';\nimport { Loader } from './../Common/Loader/Loader';\n\nimport './PokemonCard.css';\n\ninterface Props {\n  pokemonItem: PokemonsData;\n  onClick: () => void;\n  isPokemonSelected: boolean;\n}\n\nexport function PokemonCard({ pokemonItem, onClick, isPokemonSelected }: Props): JSX.Element {\n  const [pokemonInfo, setPokemonInfo] = useState({ weight: 0, baseExperience: 0, height: 0 });\n  const [isLoading, setIsLoading] = useState(false);\n  const [pokemonImage, setPokemonImage] = useState('');\n\n  useEffect(() => {\n    setIsLoading(true);\n    async function getPokemonsInfo() {\n      const response = await fetch(pokemonItem.url);\n      const body = (await response.json()) as unknown;\n      if (isPokemonInfoResponse(body)) {\n        setPokemonInfo({\n          weight: body.weight,\n          baseExperience: body.base_experience,\n          height: body.height,\n        });\n        setPokemonImage(body.sprites.other.dream_world.front_default);\n        setIsLoading(false);\n      }\n    }\n    getPokemonsInfo();\n  }, [pokemonItem.url]);\n\n  return (\n    <div className={isPokemonSelected ? 'pokemon-card active' : 'pokemon-card'} onClick={onClick}>\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <div className='pokemon-header-wrapper'>\n          <span className='pokemon-name'>{pokemonItem.name}</span>\n          <div className='pokemon-common-info'>\n            <span>Weight: {pokemonInfo.weight}</span>\n            <span>Base experience: {pokemonInfo.baseExperience}</span>\n            <span>Height: {pokemonInfo.height}</span>\n          </div>\n          <div className='pokemon-image'>\n            <img src={pokemonImage} alt='' />\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","import { PokemonsData } from '../../types/PokemonsData';\nimport { PokemonCard } from '../PokemonCard/PokemonCard';\nimport './SelectPokemons.css';\n\ntype Props = {\n  pokemons: PokemonsData[];\n  selectedPokemons: string[];\n  onSelectPokemon: (pokemonName: string, isCurrentlySelected: boolean) => void;\n};\n\nexport function SelectPokemons({ pokemons, selectedPokemons, onSelectPokemon }: Props): JSX.Element {\n  return (\n    <div>\n      <div className='pokemon-cards'>\n        {pokemons.map((pokemonItem) => {\n          const isPokemonSelected = selectedPokemons.includes(pokemonItem.name);\n          return (\n            <PokemonCard\n              pokemonItem={pokemonItem}\n              key={pokemonItem.name}\n              isPokemonSelected={isPokemonSelected}\n              onClick={() => onSelectPokemon(pokemonItem.name, isPokemonSelected)}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n","import { useCallback, useEffect, useState } from 'react';\nimport { Loader } from './components/Common/Loader/Loader';\nimport { isPokemonResponse, PokemonsData } from './types/PokemonsData';\nimport './App.css';\nimport { useIntersectionObserver } from './Hooks/useOnScreen';\nimport { SelectPokemons } from './components/SelectPokemons/SelectPokemons';\n\nconst PAGE_SIZE = 10;\n\nexport const App = (): JSX.Element => {\n  const [pokemons, setPokemons] = useState<PokemonsData[]>([]);\n  const [currentPage, setCurrentPage] = useState(0);\n  const [isFetching, setIsFetching] = useState(true);\n  const [ref, setRef] = useState<HTMLDivElement | null>(null);\n  const [selectedPokemons, setSelectedPokemons] = useState<string[]>([]);\n\n  useEffect(() => {\n    async function getPokemons() {\n      const response = await fetch(\n        `https://pokeapi.co/api/v2/pokemon?limit=${PAGE_SIZE}&offset=${currentPage * PAGE_SIZE}`\n      );\n      const body = (await response.json()) as unknown;\n      if (isPokemonResponse(body)) {\n        setIsFetching(false);\n        setPokemons((prevPokemons) => [...prevPokemons, ...body.results]);\n      }\n    }\n    getPokemons();\n  }, [currentPage]);\n\n  const onIntersect = useCallback(() => {\n    setCurrentPage((prevLast) => prevLast + 1);\n  }, []);\n\n  useIntersectionObserver({\n    ref,\n    onIntersect,\n    isDisabled: isFetching,\n  });\n\n  const onSelectPokemon = (pokemonName: string, isCurrentlySelected: boolean) => {\n    const disabledPokemons = ['bulbasaur'];\n    const selectedPokemonSize = 3;\n\n    if (isCurrentlySelected) {\n      setSelectedPokemons(selectedPokemons.filter((item) => item !== pokemonName));\n    } else {\n      if (disabledPokemons.includes(pokemonName)) return;\n      if (selectedPokemons.length >= selectedPokemonSize) {\n        selectedPokemons.shift() ?? '';\n        setSelectedPokemons([...selectedPokemons, pokemonName]);\n      } else setSelectedPokemons([...selectedPokemons, pokemonName]);\n    }\n  };\n\n  if (isFetching) {\n    return <Loader />;\n  } else {\n    return (\n      <div className='pokemon-wrapper'>\n        <span className='pokemon-logo'>choose your pokemon!</span>\n        <div className='pokemon-cards'>\n          <SelectPokemons pokemons={pokemons} selectedPokemons={selectedPokemons} onSelectPokemon={onSelectPokemon} />\n        </div>\n        <div ref={setRef} className='observer-block' />\n      </div>\n    );\n  }\n};\n","import { useEffect } from 'react';\n\ntype Props = {\n  ref: HTMLDivElement | null;\n  onIntersect: () => void;\n  isDisabled: boolean;\n};\n\nexport function useIntersectionObserver({ ref, onIntersect, isDisabled }: Props): void {\n  useEffect(() => {\n    if (isDisabled || !ref) return;\n\n    const observer = new IntersectionObserver(\n      ([entry]) => {\n        if (entry.isIntersecting) onIntersect();\n      },\n      { threshold: 0.5, rootMargin: '200px' }\n    );\n\n    observer.observe(ref);\n\n    return () => {\n      observer.unobserve(ref);\n    };\n  }, [ref, onIntersect, isDisabled]);\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}