{"version":3,"sources":["components/Game/Game.tsx","types/PokemonsData.ts","three-dots.svg","components/Common/Loader/Loader.tsx","components/PokemonCard/PokemonCard.tsx","components/SelectPokemons/SelectPokemons.tsx","ConstantValues/ConstValues.tsx","Hooks/useOnScreen.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Game","isPokemonResponse","json","Boolean","count","isPokemonInfoResponse","id","Loader","className","src","svg","alt","PokemonCard","pokemonItem","onClick","isPokemonSelected","useState","weight","baseExperience","height","pokemonInfo","setPokemonInfo","isLoading","setIsLoading","pokemonImage","setPokemonImage","useEffect","a","fetch","url","response","body","base_experience","sprites","other","dream_world","front_default","getPokemonsInfo","name","SelectPokemons","disabledPokemons","selectedPokemonSize","setIsSelected","pokemons","setPokemons","currentPage","setCurrentPage","isFetching","setIsFetching","ref","setRef","selectedPokemons","setSelectedPokemons","prevPokemons","results","getPokemons","onIntersect","isDisabled","observer","IntersectionObserver","isIntersecting","threshold","rootMargin","observe","unobserve","useIntersectionObserver","useCallback","prevLast","map","includes","pokemonName","isCurrentlySelected","filter","item","length","slice","onSelectPokemon","App","isSelected","isGameStarted","setIsGameStarted","prevState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9c48bbb7.chunk.js","sourcesContent":["export const Game = (): JSX.Element => {\n  return <div>The Game</div>;\n};\n","export type PokemonsData = { name: string; url: string };\nexport type PokemonInfo = {\n  weight: number;\n  base_experience: number;\n  height: number;\n  id: number;\n  sprites: { other: { dream_world: { front_default: string } } };\n};\nexport type PokemonsResponse = {\n  count: number;\n  results: PokemonsData[];\n};\nexport const isPokemonResponse = (json: unknown): json is PokemonsResponse => {\n  return !!json && Boolean((json as PokemonsResponse).count);\n};\nexport const isPokemonInfoResponse = (json: unknown): json is PokemonInfo => {\n  return !!json && Boolean((json as PokemonInfo).id);\n};\n","export default __webpack_public_path__ + \"static/media/three-dots.b98a8c76.svg\";","import './Loader.css';\nimport svg from './../../../three-dots.svg';\n\nexport function Loader(): JSX.Element {\n  return (\n    <div className='loader-wrapper'>\n      <img className='loader' src={svg} alt='' />\n    </div>\n  );\n}\n","import { useEffect, useState } from 'react';\nimport { isPokemonInfoResponse, PokemonsData } from '../../types/PokemonsData';\nimport { Loader } from './../Common/Loader/Loader';\n\nimport './PokemonCard.css';\n\ninterface Props {\n  pokemonItem: PokemonsData;\n  onClick: () => void;\n  isPokemonSelected: boolean;\n}\n\nexport function PokemonCard({ pokemonItem, onClick, isPokemonSelected }: Props): JSX.Element {\n  const [pokemonInfo, setPokemonInfo] = useState({ weight: 0, baseExperience: 0, height: 0 });\n  const [isLoading, setIsLoading] = useState(false);\n  const [pokemonImage, setPokemonImage] = useState('');\n\n  useEffect(() => {\n    setIsLoading(true);\n    async function getPokemonsInfo() {\n      const response = await fetch(pokemonItem.url);\n      const body = (await response.json()) as unknown;\n      if (isPokemonInfoResponse(body)) {\n        setPokemonInfo({\n          weight: body.weight,\n          baseExperience: body.base_experience,\n          height: body.height,\n        });\n        setPokemonImage(body.sprites.other.dream_world.front_default);\n        setIsLoading(false);\n      }\n    }\n    getPokemonsInfo();\n  }, [pokemonItem.url]);\n\n  return (\n    <div className={isPokemonSelected ? 'pokemon-card active' : 'pokemon-card'} onClick={onClick}>\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <div className='pokemon-header-wrapper'>\n          <span className='pokemon-name'>{pokemonItem.name}</span>\n          <div className='pokemon-common-info'>\n            <span>Weight: {pokemonInfo.weight}</span>\n            <span>Base experience: {pokemonInfo.baseExperience}</span>\n            <span>Height: {pokemonInfo.height}</span>\n          </div>\n          <div className='pokemon-image'>\n            <img src={pokemonImage} alt='' />\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","import { useCallback, useEffect, useState } from 'react';\nimport { PAGE_SIZE } from '../../ConstantValues/ConstValues';\nimport { useIntersectionObserver } from '../../Hooks/useOnScreen';\nimport { isPokemonResponse, PokemonsData } from '../../types/PokemonsData';\nimport { Loader } from '../Common/Loader/Loader';\nimport { PokemonCard } from '../PokemonCard/PokemonCard';\nimport './SelectPokemons.css';\n\ntype Props = {\n  selectedPokemonSize: number;\n  disabledPokemons: string[];\n  setIsSelected: () => void;\n};\n\nexport const SelectPokemons = ({ disabledPokemons, selectedPokemonSize, setIsSelected }: Props): JSX.Element => {\n  const [pokemons, setPokemons] = useState<PokemonsData[]>([]);\n  const [currentPage, setCurrentPage] = useState(0);\n  const [isFetching, setIsFetching] = useState(true);\n  const [ref, setRef] = useState<HTMLDivElement | null>(null);\n  const [selectedPokemons, setSelectedPokemons] = useState<string[]>([]);\n\n  useEffect(() => {\n    async function getPokemons() {\n      const response = await fetch(\n        `https://pokeapi.co/api/v2/pokemon?limit=${PAGE_SIZE}&offset=${currentPage * PAGE_SIZE}`\n      );\n      const body = (await response.json()) as unknown;\n      if (isPokemonResponse(body)) {\n        setIsFetching(false);\n        setPokemons((prevPokemons) => [...prevPokemons, ...body.results]);\n      }\n    }\n    getPokemons();\n  }, [currentPage]);\n\n  const onIntersect = useCallback(() => {\n    setCurrentPage((prevLast) => prevLast + 1);\n  }, []);\n\n  useIntersectionObserver({\n    ref,\n    onIntersect,\n    isDisabled: isFetching,\n  });\n\n  const onSelectPokemon = (pokemonName: string, isCurrentlySelected: boolean): void => {\n    if (isCurrentlySelected) {\n      setIsSelected();\n      setSelectedPokemons(selectedPokemons.filter((item) => item !== pokemonName));\n    } else {\n      if (disabledPokemons.includes(pokemonName)) return;\n      if (selectedPokemons.length >= selectedPokemonSize)\n        return setSelectedPokemons([...selectedPokemons.slice(1), pokemonName]);\n      setIsSelected();\n      setSelectedPokemons([...selectedPokemons, pokemonName]);\n    }\n  };\n\n  if (isFetching) {\n    return <Loader />;\n  } else {\n    return (\n      <div className='pokemon-wrapper'>\n        <span className='pokemon-logo'>choose your pokemon!</span>\n        <div className='pokemon-cards'>\n          {pokemons.map((pokemonItem) => {\n            const isPokemonSelected = selectedPokemons.includes(pokemonItem.name);\n            return (\n              <PokemonCard\n                pokemonItem={pokemonItem}\n                key={pokemonItem.name}\n                isPokemonSelected={isPokemonSelected}\n                onClick={() => onSelectPokemon(pokemonItem.name, isPokemonSelected)}\n              />\n            );\n          })}\n        </div>\n        <div ref={setRef} className='observer-block' />\n      </div>\n    );\n  }\n};\n","export const backgroundSpeed = 50;\nexport const PAGE_SIZE = 10;\n","import { useEffect } from 'react';\n\ntype Props = {\n  ref: HTMLDivElement | null;\n  onIntersect: () => void;\n  isDisabled: boolean;\n};\n\nexport function useIntersectionObserver({ ref, onIntersect, isDisabled }: Props): void {\n  useEffect(() => {\n    if (isDisabled || !ref) return;\n\n    const observer = new IntersectionObserver(\n      ([entry]) => {\n        if (entry.isIntersecting) onIntersect();\n      },\n      { threshold: 0.5, rootMargin: '200px' }\n    );\n\n    observer.observe(ref);\n\n    return () => {\n      observer.unobserve(ref);\n    };\n  }, [ref, onIntersect, isDisabled]);\n}\n","import { useState } from 'react';\nimport './App.css';\nimport { Game } from './components/Game/Game';\nimport { SelectPokemons } from './components/SelectPokemons/SelectPokemons';\n\nexport const App = (): JSX.Element => {\n  const disabledPokemons = [''];\n  const selectedPokemonSize = 1;\n  const [isSelected, setIsSelected] = useState(false);\n  const [isGameStarted, setIsGameStarted] = useState(false);\n  return (\n    <div className='main-wrapper'>\n      {isSelected && (\n        <div className='btn-start-wrapper'>\n          <button\n            className='btn-start'\n            onClick={() => {\n              setIsSelected(false);\n              setIsGameStarted(true);\n            }}\n          >\n            Start\n          </button>\n        </div>\n      )}\n      {isGameStarted ? (\n        <Game />\n      ) : (\n        <SelectPokemons\n          setIsSelected={() => setIsSelected((prevState) => !prevState)}\n          selectedPokemonSize={selectedPokemonSize}\n          disabledPokemons={disabledPokemons}\n        />\n      )}\n    </div>\n  );\n};\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}